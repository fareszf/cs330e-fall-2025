Factorial.py and FactorialT.py
Factorial.py:
factorial_recursion
• Perform recursive calls first, then take the return value of the recursive call and calculate the result. The result won't be calculated until you have returned from every recursive call.
• You need to keep stack frames until the recursion is over—O(n) space.

factorial_tail_recursion
• Note that a function inside a function is allowed in Python.
• Perform your calculations first and then execute the recursive call, passing the results of the current step to the next recursive step.
• We are reusing the current stack frame, so we will never get a stack overflow.
• Some compilers transfer tail recursive functions into a loop (but not in Python).
• The procedure is recursive, but the process is not.

FactorialT.py:
With self.subTest(): If one of the tests fails, this would be the end of test_0. with keeps the test going until it goes through all.

timeit:
• The timeit function takes three arguments.
• f.__name__ obtains the name of the current function, and "(100)" is the argument to the function.
• "from __main__ import " + f.__name__ imports the definition of the function.
• number = 1000 determines how many times we are going to run the function.
• The result, t, is printed after multiplying it by 1000 because timeit provides results in microseconds, and we need it in milliseconds.